<div class="row" id="app">
  <div class="col-sm-10 offset-sm-1">
    <h1>米其林服務網搜尋</h1>
    <%= form_for @distance , remote: true, html: { class: "form-inline row" } do |f| %>
      <div class="form-group col-8">
        <%= f.text_field :address, class: "form-control w-100", placeholder: "請輸入搜尋地址或地標", autofocus: true, required: true %>
        <%= f.hidden_field :latlng %>
      </div>
      <div class="form-group col-4">
        <%= f.submit "搜尋", disable_with: '搜尋中...', class: "btn btn-primary" %>
      </div>
    <% end %>
    <hr>
    <h3>國道速查</h3>
    <div class="input-group mb-3">
      <div class="input-group-prepend">
        <label class="input-group-text" for="inputGroupSelect01">{{ result.name }}</label>
      </div>
      <select class="custom-select" id="inputGroupSelect01" v-model="selectedRoad">
        <option disabled value="">請選擇國道</option>
        <option :value="item.name" v-for="(item, key) in selectRoadData" :key="key">{{ item.name }}</option>
      </select>
      <select class="custom-select" id="inputGroupSelect01" v-model="selectedDirection">
        <option disabled value="">請選擇方向</option>
        <option :value="item" v-for="item in selectDirectionData">{{ item }}</option>
      </select>
      <input type="number" v-model.number="km" placeholder="請輸入公里數">
      <button @click="getResult"
        class="btn btn-primary"
        :disabled="checkAll">速查座標</button>
      <button @click="showFreeway"
        class="btn btn-success"
        :disabled="checkFreeway">查國道表</button>
    </div>
    <p id="freeway-alert" class="text-danger text-center">{{ alertText }}</p>
    <hr>
    <h3>交流道＆服務區速查</h3>
    <div class="input w-75">
      <input type="text"
        placeholder="請輸入交流道與服務區會有自動完成提示"
        type="text"
        class="form-control"
        v-model="search"
        @keydown.down.prevent="onArrowDown"
        @keydown.up.prevent="onArrowUp"
        @keydown.enter.prevent="onEnter">
      <ul v-show="isOpen" class="list-group mb-3">
        <li class="list-group-item" v-if="!isLoading">查無交流道＆服務區資料</li>
        <li
          v-else
          v-for="(result, i) in results"
          :key="i"
          @click="setResult(result)"
          class="list-group-item"
          :class="{ 'active': i === arrowCounter }"
          @mouseover="arrowCounter = i">
          {{ result }}
        </li>
      </ul>
    </div>
    <hr>
    <h3>搜尋紀錄</h3>
    <table class="table table-striped">
      <thead>
        <tr>
          <th>搜尋名稱</th>
          <th>地址</th>
          <th>搜尋時間</th>
          <th>#</th>
        </tr>
      </thead>
      <tbody>
        <% @distances.each do |distance| %>
          <tr>
            <td><%= distance.address %></td>
            <td><%= distance.geo_address %></td>
            <td><%= distance.created_at.strftime("%m/%d %H:%M") %></td>
            <td>
              <%= link_to "顯示", distance_path(distance), class: "btn btn-outline-primary" %>
            </td>
          </tr>
        <% end %>
      </tbody>
    </table>
    <div class="d-flex justify-content-center">
      <%= paginate @distances %>
    </div>
  </div>
  <!-- Modal for freeway-->
  <template v-if="selectedRoad !== ''">
    <div class="modal fade" id="freewayModal" tabindex="-1" role="dialog" aria-labelledby="freewayModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h4 class="modal-title text-dark" id="freewayModalLabel">{{ selectedRoad.name }}</h4>
          </div>
          <div class="modal-body">
            <table class="table table-striped table-bordered">
              <thead>
                <tr>
                  <th style="width: 20%;">交流道</th>
                  <th style="width: 10%;">K數</th>
                  <th>交流道快選</th>
                  <th>北上預告出口</th>
                  <th>南下預告出口</th>
                </tr>
              </thead>
              <tbody>
                <tr v-for="(item, key) in selectInterchanges" :key="key">
                  <td>{{ item.name }}</td>
                  <td>{{ item.km }}</td>
                  <td>
                    <button class="btn btn-success btn-sm mb-2"
                      @click="setInterChange(key,'N')"
                      v-if="item.coordsNW !== ''">{{ item.name }}{{ selectDirectionData[0] }}出口</button><br/>
                    <button class="btn btn-primary btn-sm"
                      @click="setInterChange(key,'S')"
                      v-if="item.coordsSE !== ''">{{ item.name }}{{ selectDirectionData[1] }}出口</button>
                  </td>
                  <td>{{ item.cityNW }}</td>
                  <td>{{ item.citySE }}</td>
                  </tr>
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  </template>
</div>

<!-- Modal -->
<div class="modal fade" id="checkModal" tabindex="-1" role="dialog" aria-labelledby="checkModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h4 class="modal-title text-dark" id="checkModalLabel">請確認搜尋地點是否有誤</h4>
      </div>
      <div class="modal-body">
      </div>
      <div class="modal-footer">
        <%= link_to "取消", root_path, class: "btn btn-secondary" %>
      </div>
    </div>
  </div>
</div>

<script>
  var app = new Vue({
    el: "#app",
    data: {
      selectedRoad: "",
      selectedDirection: "",
      selectRoadData: ["國一","汐止－楊梅高架","國二","國三","國三甲","國四","國五","國六","國八","國十"],
      selectDirectionData: [],
      km: "",
      selectInterchanges: [],
      interchanges: [],
      result: "",
      search: "",
      results: [],
      isOpen: false,
      isLoading: false,
      arrowCounter: -1,
      alertText: ""
    },
    methods: {
      getResult() {
        var vm = this;
        if (vm.km < vm.selectInterchanges[vm.selectInterchanges.length-1].km && vm.km > vm.selectInterchanges[0].km) {
          var _arr = vm.selectInterchanges.filter(function(item, index, array) {
            return item.name.slice(-3) !== "服務區" && item.name.slice(-3) !== "休息站";
          });
          if (vm.selectedDirection === "北上" || vm.selectedDirection === "西向") {
            var arr = _arr.filter(function(item, index, array){
              return item.km >= vm.km && item.coordsNW !== "";
            });
            vm.result = arr[0];
            $("#distance_address").val(vm.result.name);
            $("#distance_latlng").val(vm.result.coordsNW);
            $("#distance_address").focus();
          } else {
            var arr = _arr.filter(function(item, index, array){
              return item.km <= vm.km && item.coordsSE !== "";
            });
            vm.result = arr[arr.length-1];
            $("#distance_address").val(vm.result.name);
            $("#distance_latlng").val(vm.result.coordsSE);
            $("#distance_address").focus();
          }
        } else {
          vm.alertText = "輸入公里數超過此國道範圍，" + vm.alertText;
        }
      },
      showFreeway() {
        var vm = this;
        if (vm.selectedRoad === "") {
          $("#freeway-alert").html("請選擇國道");
        } else {
          $("#freewayModal").modal("show");
        }
      },
      setInterChange(index, direction) {
        var vm = this;
        if (direction === "N") {
          $("#distance_address").val(vm.selectInterchanges[index].name).focus();
          $("#distance_latlng").val(vm.selectInterchanges[index].coordsNW);
          $("#freewayModal").modal("hide");
        } else {
          $("#distance_address").val(vm.selectInterchanges[index].name).focus();
          $("#distance_latlng").val(vm.selectInterchanges[index].coordsSE);
          $("#freewayModal").modal("hide");
        }
      },
      filterResults() {
        var _items = this.interchanges.map(function (item, index, array) {
          return item.name
        });
        this.results = _items.filter(item => item.indexOf(this.search) > -1);
      },
      setResult(result) {
        var vm = this;
        if (vm.results.length !== 0) {
          vm.search = result;
          var _result = vm.interchanges.find(function (item) {
            return item.name === result;
          });
          $("#distance_address").val(_result.name);
          $("#distance_latlng").val(_result.coords);
          vm.arrowCounter = -1;
          vm.search = "";
          vm.isOpen = false;
          $("#distance_address").focus();
        }
      },
      handleClickOutside(evt) {
        if (!this.$el.contains(evt.target)) {
          this.isOpen = false;
          this.arrowCounter = -1;
        }
      },
      onArrowDown() {
        if (this.arrowCounter < this.results.length) {
          this.arrowCounter = this.arrowCounter + 1;
        }
      },
      onArrowUp() {
        if (this.arrowCounter > 0) {
          this.arrowCounter = this.arrowCounter - 1;
        }
      },
      onEnter() {
        var vm = this;
        if (vm.isLoading && vm.isOpen) {
          vm.search = vm.results[vm.arrowCounter];
          var result = vm.interchanges.find(function (item) {
            return item.name === vm.search;
          });
          $("#distance_address").val(result.name);
          $("#distance_latlng").val(result.coords);
          vm.arrowCounter = -1;
          vm.search = "";
          vm.isOpen = false;
          $("#distance_address").focus();
        }
      },
      apiGetFreeway() {
        var vm = this;
        axios.get('api/v1/freeways')
          .then(function (res) {
            vm.selectRoadData = res.data.data;
          })
          .catch(function (err) {
            console.log(err);
          })
      },
      apiGetInterchange(value) {
        var vm = this
        var freeway = vm.selectRoadData.find(function (item, index, array) {
          return item.name === value;
        });
        var id = freeway.id
        axios.get('api/v1/freeways/' + id)
          .then(function (res) {
            vm.selectInterchanges = res.data.data;
            var minKm = vm.selectInterchanges[0].km;
            var maxKm = vm.selectInterchanges[vm.selectInterchanges.length-1].km;
            vm.alertText = '公里數請輸入' + minKm + 'KM ～' + maxKm + 'KM';
          })
          .catch(function (err) {
            console.log(err);
          })
      },
      apiGetAllInterchanges() {
        var vm = this;
        var interchangeFromApi = [];
        var result = [];
        var i = 0;
        axios.get('api/v1/interchanges')
          .then(function (res) {
            interchangeFromApi = res.data.data;
            interchangeFromApi.forEach(function (item) {
              if (item.name.slice(-3) === "服務區" || item.name.slice(-3) === "休息站") {
                vm.interchanges.push({ name: item.name.concat("北上"), coords: item.coordsNW })
                vm.interchanges.push({ name: item.name.concat("南下"), coords: item.coordsSE })
              } else if (item.coordsNW !== "" || item.coordsSE !== ""){
                var coords = item.coordsNW !== "" ? item.coordsNW : item.coordsSE;
                vm.interchanges.push({ name: item.name, coords: coords })
              }
            });
          });
      }
    },
    computed: {
      checkAll() {
        return this.selectedRoad === "" || this.selectedDirection === "" || this.km === "";
      },
      checkFreeway() {
        return this.selectedRoad === "";
      }
    },
    watch: {
      selectedRoad(value) {
        var vm = this;
        if(value === "國一" || value === "汐止－楊梅高架" || value === "國三" || value === "國三甲" || value === "國五") {
          vm.selectDirectionData = ["北上","南下"];
        }
        else {
          vm.selectDirectionData = ["東向","西向"];
        }
        vm.apiGetInterchange(value);
      },
      results() {
        var vm = this;
        if (vm.results.length === 0) {
          vm.isLoading = false;
        } else {
          vm.isLoading = true;
        }
      },
      search() {
        if (this.search !== "") {
          this.$emit('input', this.search);
          this.filterResults();
          this.isOpen = true;
        } else {
          this.isOpen = false;
        }
      }
    },
    created() {
      this.apiGetFreeway();
      this.apiGetAllInterchanges();
    },
    mounted() {
      document.addEventListener('click', this.handleClickOutside);
    },
    destroyed() {
      document.removeEventListener('click', this.handleClickOutside);
    }
  });
</script>